#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.5446
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Linq;
using System.Data.Linq.Mapping;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;



[System.Data.Linq.Mapping.DatabaseAttribute(Name="countries")]
public partial class Countries : System.Data.Linq.DataContext
{
	
	private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
	
  #region Extensibility Method Definitions
  partial void OnCreated();
  partial void InsertCity(City instance);
  partial void UpdateCity(City instance);
  partial void DeleteCity(City instance);
  partial void InsertCountry(Country instance);
  partial void UpdateCountry(Country instance);
  partial void DeleteCountry(Country instance);
  #endregion
	
	public Countries(string connection) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
//	public Countries(System.Data.IDbConnection connection) : 
//			base(connection, mappingSource)
//	{
//		OnCreated();
//	}
	
//	public Countries(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
//			base(connection, mappingSource)
//	{
//		OnCreated();
//	}
	
//	public Countries(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
//			base(connection, mappingSource)
//	{
//		OnCreated();
//	}
	
	public System.Data.Linq.Table<City> City
	{
		get
		{
			return this.GetTable<City>();
		}
	}
	
	public System.Data.Linq.Table<Country> Country
	{
		get
		{
			return this.GetTable<Country>();
		}
	}
}

[Table()]
public partial class City : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private long _Id;
	
	private string _Name;
	
	private System.Nullable<long> _Population;
	
	private bool _IsCapital;
	
	private long _CountryId;
	
	private EntityRef<Country> _Country;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnPopulationChanging(System.Nullable<long> value);
    partial void OnPopulationChanged();
    partial void OnIsCapitalChanging(bool value);
    partial void OnIsCapitalChanged();
    partial void OnCountryIdChanging(long value);
    partial void OnCountryIdChanged();
    #endregion
	
	public City()
	{
		this._Country = default(EntityRef<Country>);
		OnCreated();
	}
	
	[Column(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public long Id
	{
		get
		{
			return this._Id;
		}
		set
		{
			if ((this._Id != value))
			{
				this.OnIdChanging(value);
				this.SendPropertyChanging();
				this._Id = value;
				this.SendPropertyChanged("Id");
				this.OnIdChanged();
			}
		}
	}
	
	[Column(Storage="_Name", DbType="NVarChar(500) NOT NULL", CanBeNull=false)]
	public string Name
	{
		get
		{
			return this._Name;
		}
		set
		{
			if ((this._Name != value))
			{
				this.OnNameChanging(value);
				this.SendPropertyChanging();
				this._Name = value;
				this.SendPropertyChanged("Name");
				this.OnNameChanged();
			}
		}
	}
	
	[Column(Storage="_Population", DbType="BigInt")]
	public System.Nullable<long> Population
	{
		get
		{
			return this._Population;
		}
		set
		{
			if ((this._Population != value))
			{
				this.OnPopulationChanging(value);
				this.SendPropertyChanging();
				this._Population = value;
				this.SendPropertyChanged("Population");
				this.OnPopulationChanged();
			}
		}
	}
	
	[Column(Storage="_IsCapital", DbType="Bit NOT NULL")]
	public bool IsCapital
	{
		get
		{
			return this._IsCapital;
		}
		set
		{
			if ((this._IsCapital != value))
			{
				this.OnIsCapitalChanging(value);
				this.SendPropertyChanging();
				this._IsCapital = value;
				this.SendPropertyChanged("IsCapital");
				this.OnIsCapitalChanged();
			}
		}
	}
	
	[Column(Storage="_CountryId", DbType="BigInt NOT NULL")]
	public long CountryId
	{
		get
		{
			return this._CountryId;
		}
		set
		{
			if ((this._CountryId != value))
			{
				if (this._Country.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnCountryIdChanging(value);
				this.SendPropertyChanging();
				this._CountryId = value;
				this.SendPropertyChanged("CountryId");
				this.OnCountryIdChanged();
			}
		}
	}
	
	[Association(Name="FK__City__0000000000000024", Storage="_Country", ThisKey="CountryId", OtherKey="Id", IsForeignKey=true)]
	public Country Country
	{
		get
		{
			return this._Country.Entity;
		}
		set
		{
			Country previousValue = this._Country.Entity;
			if (((previousValue != value) 
						|| (this._Country.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Country.Entity = null;
					previousValue.City.Remove(this);
				}
				this._Country.Entity = value;
				if ((value != null))
				{
					value.City.Add(this);
					this._CountryId = value.Id;
				}
				else
				{
					this._CountryId = default(long);
				}
				this.SendPropertyChanged("Country");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[Table()]
public partial class Country : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private long _Id;
	
	private string _Name;
	
	private long _Population;
	
	private double _Area;
	
	private string _Url;
	
	private EntitySet<City> _City;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnPopulationChanging(long value);
    partial void OnPopulationChanged();
    partial void OnAreaChanging(double value);
    partial void OnAreaChanged();
    partial void OnUrlChanging(string value);
    partial void OnUrlChanged();
    #endregion
	
	public Country()
	{
		this._City = new EntitySet<City>(new Action<City>(this.attach_City), new Action<City>(this.detach_City));
		OnCreated();
	}
	
	[Column(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public long Id
	{
		get
		{
			return this._Id;
		}
		set
		{
			if ((this._Id != value))
			{
				this.OnIdChanging(value);
				this.SendPropertyChanging();
				this._Id = value;
				this.SendPropertyChanged("Id");
				this.OnIdChanged();
			}
		}
	}
	
	[Column(Storage="_Name", DbType="NVarChar(500) NOT NULL", CanBeNull=false)]
	public string Name
	{
		get
		{
			return this._Name;
		}
		set
		{
			if ((this._Name != value))
			{
				this.OnNameChanging(value);
				this.SendPropertyChanging();
				this._Name = value;
				this.SendPropertyChanged("Name");
				this.OnNameChanged();
			}
		}
	}
	
	[Column(Storage="_Population", DbType="BigInt NOT NULL")]
	public long Population
	{
		get
		{
			return this._Population;
		}
		set
		{
			if ((this._Population != value))
			{
				this.OnPopulationChanging(value);
				this.SendPropertyChanging();
				this._Population = value;
				this.SendPropertyChanged("Population");
				this.OnPopulationChanged();
			}
		}
	}
	
	[Column(Storage="_Area", DbType="Float NOT NULL")]
	public double Area
	{
		get
		{
			return this._Area;
		}
		set
		{
			if ((this._Area != value))
			{
				this.OnAreaChanging(value);
				this.SendPropertyChanging();
				this._Area = value;
				this.SendPropertyChanged("Area");
				this.OnAreaChanged();
			}
		}
	}
	
	[Column(Storage="_Url", DbType="NVarChar(500)")]
	public string Url
	{
		get
		{
			return this._Url;
		}
		set
		{
			if ((this._Url != value))
			{
				this.OnUrlChanging(value);
				this.SendPropertyChanging();
				this._Url = value;
				this.SendPropertyChanged("Url");
				this.OnUrlChanged();
			}
		}
	}
	
	[Association(Name="FK__City__0000000000000024", Storage="_City", ThisKey="Id", OtherKey="CountryId", DeleteRule="NO ACTION")]
	public EntitySet<City> City
	{
		get
		{
			return this._City;
		}
		set
		{
			this._City.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_City(City entity)
	{
		this.SendPropertyChanging();
		entity.Country = this;
	}
	
	private void detach_City(City entity)
	{
		this.SendPropertyChanging();
		entity.Country = null;
	}
}
#pragma warning restore 1591
